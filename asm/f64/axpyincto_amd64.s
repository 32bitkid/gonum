// Generated by running
//  go generate github.com/gonum/internal/asm
// DO NOT EDIT.

// Copyright ©2015 The gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//
// Some of the loop unrolling code is copied from:
// http://golang.org/src/math/big/arith_amd64.s
// which is distributed under these terms:
//
// Copyright (c) 2012 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//+build !noasm,!appengine

#include "textflag.h"

// func DaxpyIncTo(dst []float64, incDst, idst uintptr, alpha float64, x, y []float64, n, incX, incY, ix, iy uintptr)
TEXT ·AxpyIncTo(SB), NOSPLIT, $0
	MOVQ  dst_base+0(FP), DI // DI := &dst
	MOVQ  x_base+48(FP), SI  // SI := &x
	MOVQ  y_base+72(FP), DX  // DX := &y
	MOVQ  n+96(FP), CX       // CX := n
	CMPQ  CX, $0             // if CX == 0 { return }
	JE    end
	MOVQ  ix+120(FP), R8
	MOVQ  iy+128(FP), R9
	MOVQ  idst+32(FP), R10
	LEAQ  (SI)(R8*8), SI     // SI = &(x[ix])
	LEAQ  (DX)(R9*8), DX     // DX = &(y[iy])
	LEAQ  (DI)(R10*8), DI    // DI = &(dst[idst])
	MOVQ  incX+104(FP), R8   // R8 = incX * sizeof(float64)
	SHLQ  $3, R8
	MOVQ  incY+112(FP), R9   // R9 = incY * sizeof(float64)
	SHLQ  $3, R9
	MOVQ  incDst+24(FP), R10 // R10 = incDst * sizeof(float64)
	SHLQ  $3, R10
	MOVSD alpha+40(FP), X0
	MOVSD X0, X1
	MOVQ  CX, BX
	ANDQ  $3, BX             // BX = CX % 4
	SHRQ  $2, CX             // CX = floor( CX / 4 )
	JZ    tail_start         // if CX == 0 { goto tail_start }

loop:  // do {
	// y[i] += alpha * x[i] unrolled 2x.
	MOVSD (SI), X2       // X_i = x[i]
	MOVSD (SI)(R8*1), X3
	LEAQ  (SI)(R8*2), SI // SI = &(SI[incX*2])
	MOVSD (SI), X4
	MOVSD (SI)(R8*1), X5

	MULPD X0, X2 // X_i *= a
	MULPD X1, X3
	MULPD X0, X4
	MULPD X1, X5

	ADDSD (DX), X2       // X_i += y[i]
	ADDSD (DX)(R9*1), X3
	LEAQ  (DX)(R9*2), DX // DX = &(DX[incY*2])
	ADDSD (DX), X4
	ADDSD (DX)(R9*1), X5

	MOVSD X2, (DI)        // y[i] = X_i
	MOVSD X3, (DI)(R10*1)
	LEAQ  (DI)(R10*2), DI // DI = &(DI[incDst*2])
	MOVSD X4, (DI)
	MOVSD X5, (DI)(R10*1)

	LEAQ (SI)(R8*2), SI  // SI = &(SI[incX*2])
	LEAQ (DX)(R9*2), DX  // DX = &(DX[incY*2]
	LEAQ (DI)(R10*2), DI // DI = &(DI[incDst*2])
	LOOP loop            // } while --CX > 0
	CMPQ BX, $0          // if BX == 0 { return }
	JE   end

tail_start: // Reset Loop registers
	MOVQ BX, CX // Loop counter: CX = BX

tail:  // do {
	// y[i] += alpha * x[i] for the last iteration if n is odd.
	MOVSD (SI), X2 // X2 = x[i]
	MULPD X0, X2   // X2 *= a
	ADDSD (DX), X2 // X2 += y[i]
	MOVSD X2, (DI) // y[i] = X2
	ADDQ  R8, SI   // SI += incX
	ADDQ  R9, DX   // DX += incY
	ADDQ  R10, DI  // DI += incDst
	LOOP  tail     // } while --CX > 0

end:
	RET
